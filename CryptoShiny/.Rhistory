devtools::check()
# No Remotes ----
# Attachments ----
to_install <- c("curl", "dplyr", "DT", "ggplot2", "glue", "httr", "jsonlite", "lubridate", "magrittr", "plotly", "pracma", "rlang", "shiny", "shinycssloaders", "shinydashboard", "shinythemes", "stats", "utils")
for (i in to_install) {
message(paste("looking for ", i))
if (!requireNamespace(i)) {
message(paste("     installing", i))
install.packages(i)
}
}
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(CryptoShiny)
interesting_crypto <- get_imp_Crp()[-c(8,13,15,16)]
interesting_crypto <- get_imp_Crp()[-c(8,13,15,16)]
interesting_crypto
CryptoCurrencyName(interesting_crypto)
CryptoCurrencyName("BTC")
CryptoCurrencyName("BTC")
CryptoCurrencyName("ETH")
data <- read.csv("data/CryptonewsData.csv")[-1]
data <- read.csv("./data/CryptonewsData.csv")[-1]
data <- read.csv("./data-raw/CryptonewsData.csv")[-1]
data <- read.csv("./data-raw/CryptonewsData.csv")[-1]
head(data)
data <- read.csv("./data-raw/CryptonewsData.csv")
head(data)
data <- read.csv("./data-raw/CryptonewsData.csv")[-c(1,2)]
head(data)
data <- read.csv("./data-raw/CryptonewsData.csv")[-1]
head(data)
result <- analyse_crps_news(data, interesting_crypto)
interesting_crypto <- c("BTC", "ETH", "LTC", "XMR", "USDT")
interesting_crypto <- c("BTC", "ETH", "LTC", "XMR", "USDT")
result <- analyse_crps_news(data, interesting_crypto)
head(result)
finalHour <- resTspToHour(result, interesting_crypto)
updateHourNewsData()
updateHourNewsData()
#' Updates the dataset CryptoNewsAnalysedHours with the latest news from CryptoCompare API
#' @export updateHourNewsData
#' @importFrom dplyr filter mutate
#' @importFrom utils read.csv write.csv
updateHourNewsData <- function() {
dataHour <- read.csv("data-raw/CryptoNewsAnalysedHour.csv")[-1]
dataHour$time <- as.POSIXct(dataHour$time)
newestHour <- max(dataHour$time)
Newdata <- dl_data_from(as.numeric(newestHour))
if (length(Newdata$time) != 0) {
Newdata <- Newdata %>%
filter(time > newestHour)
if (length(Newdata$time) != 0) {
interesting_cryptos <- names(dataHour)[-1]
result <- analyse_crps_news(Newdata, interesting_cryptos)
finalHour <- resTspToHour(result, interesting_cryptos)
finalHour <- finalHour %>%
filter(time != min(time)) #avoid duplicates
total <- rbind(finalHour, dataHour)
write.csv(total, "data/CryptoNewsAnalysedHour.csv")
print("updated")
}
}
if (length(Newdata$time) == 0) {
print("Already up to date")
}
}
updateHourNewsData()
updateHourNewsData()
updateDayNewsData()
#' Updates the dataset CryptoNewsAnalysedDays with the latest news from CryptoCompare API
#' @export updateDayNewsData
#' @importFrom dplyr filter mutate
#' @importFrom glue glue
#' @importFrom utils read.csv write.csv
updateDayNewsData <- function() {
dataDay <- read.csv("data-raw/CryptoNewsAnalysedDays.csv")[-1]
dataDay$time <- as.POSIXct(dataDay$time)
newestDay <- max(dataDay$time)
print(glue("News by day Data loaded from csv, number of entries: ", length(dataDay$time), ", last entry from: ", newestDay, sep=""))
Newdata <- dl_data_from(as.numeric(newestDay))
if (length(Newdata$time) != 0) {
Newdata <- Newdata %>%
filter(time > newestDay)
if (length(Newdata$time) != 0) {
interesting_cryptos <- names(dataDay)[-1]
result <- analyse_crps_news(Newdata, interesting_cryptos)
finalDay <- resTspToDay(result, interesting_cryptos)
finalDay <- finalDay %>%
filter(time != min(time)) #avoid duplicates
total <- rbind(finalDay, dataDay)
write.csv(total, "data-raw/CryptoNewsAnalysedDays.csv")
print(glue("CSV file updated: number of entries: ", length(total$time), ", last entry from: ", max(total$time), sep=""))
}
}
if (length(Newdata$time) == 0) {
print("Already up to date")
}
}
updateDayNewsData()
devtools::check()
data <- read.csv("data-raw/CryptonewsData.csv")[-1]
interesting_crypto <- c("BTC", "ETH", "LTC", "XMR", "USDT")
result <- analyse_crps_news(data[seq(from = 1, to = 500, by = 1)], interesting_crypto)
interesting_crypto <- c("BTC", "ETH", "LTC", "XMR", "USDT")
result <- analyse_crps_news(data[,seq(from = 1, to = 500, by = 1)], interesting_crypto)
interesting_crypto <- c("BTC", "ETH", "LTC", "XMR", "USDT")
result <- analyse_crps_news(data[seq(from = 1, to = 500, by = 1),], interesting_crypto)
head(result)
finalHour <- resTspToHour(result, interesting_crypto)
#write.csv(finalHour, "data-raw/CryptoNewsOccurencesHour.csv")
head(finalHour)
finalDay <- resTspToDay(result, interesting_crypto)
#write.csv(finalDay, "data-raw/CryptoNewsOccurencesDays.csv")
head(finalDay)
devtools::check()
devtools::check()
CryptonewsData <- data
save(CryptonewsData, file="./data/CryptonewsData.RData")
CryptonewsData <- data
save(CryptonewsData, file="./data/CryptonewsData.RData")
CryptonewsData <- data
save(CryptonewsData, file="CryptonewsData.RData")
devtools::check()
CryptonewsData[,seq(1,500,1)]
CryptonewsData[seq(1,500,1),]
devtools::check()
devtools::check()
rm(list=ls())
devtools::check()
CryptoNewsOccurencesHour
data <- CryptoNewsOccurencesHour
View(data)
rm(list=ls())
devtools::check()
CryptonewsData <- CryptonewsData
#save(mydata, file="data/mydata.RData")
View(CryptonewsData)
CryptonewsData <- iconv(CryptonewsData , "latin1", "ASCII", sub="")
save(CryptonewsData, file="CryptonewsData.RData")
CryptonewsData <- CryptonewsData
iconv(CryptonewsData , "latin1", "ASCII", sub="")
save(CryptonewsData, file="CryptonewsData.RData")
CryptonewsData  <- read.csv("CryptonewsData.csv")
save(CryptonewsData, file="CryptonewsData.RData")
CryptonewsData  <- CryptonewsData[-1]
save(CryptonewsData, file="CryptonewsData.RData")
CryptonewsData$time = iconv(CryptonewsData$time, "latin1", "ASCII", sub="")
CryptonewsData$body = iconv(CryptonewsData$body, "latin1", "ASCII", sub="")
save(CryptonewsData, file="CryptonewsData.RData")
rm(list=ls())
devtools::check()
devtools::check()
finalHour <- resTspToHour(result, interesting_crypto)
library(CryptoShiny)
head(CryptonewsData)
interesting_crypto <- get_imp_Crp()
interesting_crypto
CryptoCurrencyName("BTC")
CryptoCurrencyName("ETH")
interesting_crypto <- c("BTC", "ETH", "LTC", "XMR", "USDT")
result <- analyse_crps_news(CryptonewsData[seq(1,500,1),], interesting_crypto)
head(result)
finalHour <- resTspToHour(result, interesting_crypto)
View(result)
result$time <- as.numeric(resul$time)
result$time <- as.numeric(result$time)
View(result)
finalHour <- resTspToHour(result, interesting_crypto)
#write.csv(finalHour, "CryptoNewsOccurencesHour.csv")
head(finalHour)
finalDay <- resTspToDay(result, interesting_crypto)
#write.csv(finalDay, "CryptoNewsOccurencesDays.csv")
head(finalDay)
rm(list=ls())
devtools::check()
