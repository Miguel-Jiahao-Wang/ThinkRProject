install.packages(c("devtools",
"roxygen2",
"usethis",
"testthat",
"knitr"))
install.packages(CrytoProject)
source('~/ThinkRProject/CryptoProject/R/devstuff.R')
# Dependencies
usethis::use_package("tidyverse")
usethis::use_package("jsonlite")
usethis::use_package("lubridate")
usethis::use_package("pracma")
usethis::use_pipe()
install.packages(pracma)
install.packages("pracma")
install.packages("lubridate")
install.packages("lubridate")
#' @param firstDay: first day to analyse in dd/mm/yyyy format
#' @param lastDay: last day to analyse in dd/mm/yyyy format
#' @param crytocurrenty: cryptocurrency to analyse
#' @param comparison: currency to be compared
#'
#' @return dataframe with the time, highest price, lowest price, open price, close price of the chosen timeframe
#' @export day_hour
#' @importFrom dplyr mutate arrange
#' @importFrom jsonlite fromJSON
#' @examples
day_hour <- function(timeframe, firstDay, lastDay, crytocurrenty = "BTC", comparison = "USD") {
# Initialitaion of the data frame with all the desired output
df <- data.frame(
Date=as.Date(character()),
high=double(),
low = double(),
open = double(),
close = double(),
volume = double()
)
# Date
firstDay <- as.Date(firstDay,format="%d/%m/%Y")
lastDay <- as.Date(lastDay,format="%d/%m/%Y")
time <- round(as.numeric(as.POSIXct(lastDay, format="%m/%d/%Y")))
# Number of points of hour dataframe
n <- as.numeric(lastDay-firstDay)
if (timeframe %in% c("Day", "day")){
a <- "histoday"
incr <- 3600*24
}
else if (timeframe %in% c("Hour", "hour")) {
a <- "histohour"
n <- round(n*24)
incr <- 3600
}
else {
print('No valid timeframe')
return();
}
# Maximum number of points is 2000
if (n <= 2000) {
link <- paste("https://min-api.cryptocompare.com/data/", a,"?fsym=",crytocurrenty, "&tsym=", comparison,"&limit=", n, "&aggregate=1&toTs=",time, "&extraParams=ThinkR", sep = "")
linkVolume <- paste("https://min-api.cryptocompare.com/data/exchange/", a,"?tsym=",crytocurrenty,"&limit=", n, "&toTs=",time, "&extraParams=ThinkR", sep = "")
dataPrice <- fromJSON(link)
dataVolume <- fromJSON(linkVolume)
df <- data.frame(
Date= as.POSIXct(dataPrice$Data$time,origin = "1970-01-01",tz = "GMT"),
high=dataPrice$Data$high,
low = dataPrice$Data$low,
open = dataPrice$Data$open,
close = dataPrice$Data$close,
volume = dataVolume$Data$volume
)
}
# If the number of points is higher than the maximum we need to do a for loop
else {
# Round to the highest Integuer
iterations <- ceiling(n/2000)
n1 <- 2000
for (i in 1:iterations){
if (i ==iterations){
n1 =n-2000*(iterations-1)
}
linkPrice <- paste("https://min-api.cryptocompare.com/data/", a,"?fsym=",crytocurrenty, "&tsym=", comparison,"&limit=", n1, "&aggregate=1&toTs=",time, "&extraParams=ThinkR", sep = "")
linkVolume <- paste("https://min-api.cryptocompare.com/data/exchange/", a,"?tsym=",crytocurrenty,"&limit=", n1, "&toTs=",time, "&extraParams=ThinkR", sep = "")
dataPrice <- fromJSON(linkPrice)
dataVolume <- fromJSON(linkVolume)
df1 <- data.frame(
Date= as.POSIXct(dataPrice$Data$time,origin = "1970-01-01",tz = "GMT"),
high=dataPrice$Data$high,
low = dataPrice$Data$low,
open = dataPrice$Data$open,
close = dataPrice$Data$close,
volume = dataVolume$Data$volume
)
df <- rbind(df, df1)
time <- time - 2000*incr
}
}
df <-df %>% mutate(direction = ifelse(open >close, "increasing", "decreasing")) %>% arrange(Date)
return(df)
}
#Documents
devtools::document()
#Documents
devtools::document()
#Documents
devtools::document()
check("day_hour")
library(devtools)
check("day_hour")
check("day_hour.R")
check("R\day_hour.R")
check("R/day_hour.R")
check("/day_hour.R")
check("/R/day_hour.R")
check("~/R/day_hour.R")
check("~/day_hour.R")
check("day_hour.R")
check("day_hour.R")
check("R/day_hour.R")
check("./R/day_hour.R")
check("R/day_hour")
# Dependencies
usethis::use_package("tidyverse")
usethis::use_package("jsonlite")
usethis::use_package("dplyr")
usethis::use_package("jsonlite")
devtools::document()
check()
usethis::use_mit_license()
usethis::use_mit_license()
usethis::use_mit_license()
options(usethis.full_name= "Jiahao Wang")
usethis::use_mit_license()
check()
usethis::use_pipe()
check()
check()
check()
check()
build("day_hour.R")
build("./R/day_hour.R")
build("./R/day_hour.R", binary = TRUE)
build("day_hour.R", binary = TRUE)
build("CryptoProject", binary = TRUE)
build("~/ThinkRProject/CryptoProject", binary = TRUE)
build("~/CryptoProject", binary = TRUE)
build("/CryptoProject", binary = TRUE)
build("./CryptoProject", binary = TRUE)
build("CryptoProject", binary = TRUE)
build("CryptoProject.Rproj", binary = TRUE)
build()
install_github("https://github.com/fernandopf/ThinkRProject/tree/fernando/CryptoProject")
install_github("https://github.com/fernandopf/ThinkRProject/tree/fernando/CryptoProject")
install_github("https://github.com/fernandopf/ThinkRProject/tree/fernando/CryptoProject.Rproj")
install.packages("G:\Mi unidad\Data Science\ThinkR\CrytoProject", repos = NULL, type="source")
install.packages("G:\Mi unidad\Data Science\ThinkR\CryptoProject", repos = NULL, type="source")
install.packages("G:/Mi unidad/Data Science/ThinkR/CryptoProject", repos = NULL, type="source")
package("CryptoProject")
library("CryptoProject")
help(hour_day)
help(day_hour)
check()
library(devtools)
check()
check()
install.packages('curl')
check()
check()
check()
BTCUSD <- lastweek_minute("BTC", "USD")
tail(BTCUSD)
check()
check()
library(curl)
check()
install.packages('curl')
install.packages("curl")
library("curl")
check()
check()
library(devtools)
check()
install.packages("RCurl")
check()
check()
help("as.difftime")
check()
View(BTCUSD)
check()
library(curl)
check()
check()
usethis::use_package("curl")
usethis::use_package("curl")
check()
check()
usethis::use_package("lubridate")
install.packages(lubridate)
install.packages("lubridate")
usethis::use_package("lubridate")
check()
library(lubridate)
check()
example1 <- day_hour("day", "01/12/2017", "01/08/2018", "BTC", "USD")
head(example1)
example2 <- weekly_monthly_transformation(example1, "week")
head(example2)
weekly_monthly_transformation <- function(df, timeframe){
if (timeframe %in% c("Month", "month")){
df.transformed <- df %>%
group_by(date = floor_date(date, "month")) %>%
summarise(high = max(high), low = min(low), open = head(open, n = 1), close = tail(close, n = 1), volume = sum(volume))
}
else if (timeframe %in% c("Week", "week")){
df.transformed <- df %>%
group_by(date = floor_date(date, "week")) %>%
summarise(high = max(high), low = min(low), open = head(open, n = 1), close = tail(close, n = 1), volume = sum(volume))
}
return(df.transformed)
}
example2 <- weekly_monthly_transformation(example1, "week")
head(example2)
usethis::use_package("lubridate")
check()
check()
usethis::use_package("utils")
check()
usethis::use_package("pracma")
check()
check()
utils::globalVariables(c("."))
check()
utils::globalVariables(c("."), add = FALSE)
check()
check()
check()
check()
build()
crypto_correlation <- function(firstDay, lastDay, cryptoA, cryptoB){
library(dplyr)
cryptoAData <- crypto_dataset_day_hour("hour", firstDay, lastDay, cryptoA ) %>%
mutate(avg = (high + low)/2) %>%
select(avg)
cryptoBData <- crypto_dataset_day_hour("hour", firstDay, lastDay, cryptoB ) %>%
mutate(avg = (high + low)/2) %>%
select(avg)
return(cor(cryptoAData,cryptoBData))
}
correlation <- crypto_correlation("01/09/2018", "01/10/2018", "BTC", "ETH")
crypto_correlation <- function(firstDay, lastDay, cryptoA, cryptoB){
library(dplyr)
cryptoAData <- day_hour("hour", firstDay, lastDay, cryptoA ) %>%
mutate(avg = (high + low)/2) %>%
select(avg)
cryptoBData <- day_hour("hour", firstDay, lastDay, cryptoB ) %>%
mutate(avg = (high + low)/2) %>%
select(avg)
return(cor(cryptoAData,cryptoBData))
}
correlation <- crypto_correlation("01/09/2018", "01/10/2018", "BTC", "ETH")
correlation <- crypto_correlation("01/09/2018", "01/10/2018", "BTC", "ETH")
crypto_correlation <- function(firstDay, lastDay, cryptoA, cryptoB){
library(dplyr)
cryptoAData <- hour_day("hour", firstDay, lastDay, cryptoA ) %>%
mutate(avg = (high + low)/2) %>%
select(avg)
cryptoBData <- hour_day("hour", firstDay, lastDay, cryptoB ) %>%
mutate(avg = (high + low)/2) %>%
select(avg)
return(cor(cryptoAData,cryptoBData))
}
correlation <- crypto_correlation("01/09/2018", "01/10/2018", "BTC", "ETH")
source('~/ThinkRProject/CryptoProject/R/day_hour.R')
crypto_correlation <- function(firstDay, lastDay, cryptoA, cryptoB){
library(dplyr)
cryptoAData <- day_hour("hour", firstDay, lastDay, cryptoA ) %>%
mutate(avg = (high + low)/2) %>%
select(avg)
cryptoBData <- day_hour("hour", firstDay, lastDay, cryptoB ) %>%
mutate(avg = (high + low)/2) %>%
select(avg)
return(cor(cryptoAData,cryptoBData))
}
correlation <- crypto_correlation("01/09/2018", "01/10/2018", "BTC", "ETH")
day_hour <- function(timeframe, firstDay, lastDay, crytocurrenty = "BTC", comparison = "USD") {
library(dplyr)
library(jsonlite)
# Date
firstDay <- as.Date(firstDay,format="%d/%m/%Y")
lastDay <- as.Date(lastDay,format="%d/%m/%Y")
time <- round(as.numeric(as.POSIXct(lastDay, format="%m/%d/%Y")))
# Number of points of hour dataframe
n <- as.numeric(lastDay-firstDay)
if (timeframe %in% c("Day", "day")){
a <- "histoday"
incr <- 3600*24
}
else if (timeframe %in% c("Hour", "hour")) {
a <- "histohour"
n <- round(n*24)
incr <- 3600
}
else {
print('No valid timeframe')
return();
}
# Maximum number of points is 2000
if (n <= 2000) {
link <- paste("https://min-api.cryptocompare.com/data/", a,"?fsym=",crytocurrenty, "&tsym=", comparison,"&limit=", n, "&aggregate=1&toTs=",time, "&extraParams=ThinkR", sep = "")
linkVolume <- paste("https://min-api.cryptocompare.com/data/exchange/", a,"?tsym=",crytocurrenty,"&limit=", n, "&toTs=",time, "&extraParams=ThinkR", sep = "")
dataPrice <- fromJSON(link)
dataVolume <- fromJSON(linkVolume)
df <- data.frame(
date= as.POSIXct(dataPrice$Data$time,origin = "1970-01-01",tz = "GMT"),
high=dataPrice$Data$high,
low = dataPrice$Data$low,
open = dataPrice$Data$open,
close = dataPrice$Data$close,
volume = dataVolume$Data$volume
)
}
# If the number of points is higher than the maximum we need to do a for loop
else {
# Round to the highest Integuer
iterations <- ceiling(n/2000)
n1 <- 2000
for (i in 1:iterations){
if (i ==iterations){
n1 =n-2000*(iterations-1)
}
linkPrice <- paste("https://min-api.cryptocompare.com/data/", a,"?fsym=",crytocurrenty, "&tsym=", comparison,"&limit=", n1, "&aggregate=1&toTs=",time, "&extraParams=ThinkR", sep = "")
linkVolume <- paste("https://min-api.cryptocompare.com/data/exchange/", a,"?tsym=",crytocurrenty,"&limit=", n1, "&toTs=",time, "&extraParams=ThinkR", sep = "")
dataPrice <- fromJSON(linkPrice)
dataVolume <- fromJSON(linkVolume)
df1 <- data.frame(
date= as.POSIXct(dataPrice$Data$time,origin = "1970-01-01",tz = "GMT"),
high=dataPrice$Data$high,
low = dataPrice$Data$low,
open = dataPrice$Data$open,
close = dataPrice$Data$close,
volume = dataVolume$Data$volume
)
if (i ==1){
df <- df1
} else {
df <- rbind(df, df1)
}
time <- time - 2000*incr
}
}
df <-df %>%
mutate(direction = ifelse(open >close, "increasing", "decreasing")) %>%
arrange(date)
return(df)
}
correlation <- crypto_correlation("01/09/2018", "01/10/2018", "BTC", "ETH")
correlation
check()
library(devtools)
check()
build()
#' @param n_MA Window Moving Average
#' @param n_quick_MACD  quick MACD
#' @param n_slow_MACD  slow MACD
#' @param n_signal_MACD signal MACD
#'
#' @return dataframe with the financial indicators added
#' @export averages
#' @importFrom pracma movavg
#'
#' @examples
averages <- function(df, n_MA, n_quick_MACD, n_slow_MACD, n_signal_MACD){
out <- df %>%
mutate(daily_average = (high +low)/2)  %>%
mutate(MA = movavg(x = daily_average, n = n_MA, type = "s")) %>%
mutate(quick_EMA = movavg(x = daily_average, n = n_quick_MACD, type = "e")) %>%
mutate(slow_EMA = movavg(x = daily_average, n = n_slow_MACD, type = "e")) %>%
mutate(signal_MACD = movavg(x = daily_average, n = n_signal_MACD, type = "e")) %>%
mutate(MACD = quick_EMA - slow_EMA)
return(out)
}
library(devtools)
check()
iris %>% select(Species)crypto_correlation
crypto_correlation
install.packages("https://github.com/fernandopf/ThinkRProject/blob/fernando/CryptoProject_0.0.0.9000.tar.gz")
install.packages("https://github.com/fernandopf/ThinkRProject/blob/fernando/CryptoProject_0.0.0.9000.tar.gz",type = "source",repos = NULL)
remotes::install_github("fernandopf/ThinkRProject")
remotes::install_github("fernandopf/ThinkRProject")
remotes::install_github("fernandopf/ThinkRProject/blob/fernando/")
check()
library(CryptoProject)
check()
example4 <- crypto("hour", "01/07/2018", "01/08/2018", "BTC", "USD",5, 26, 12, 9)
source('~/ThinkRProject/CryptoProject/R/crypto.R')
example4 <- crypto("hour", "01/07/2018", "01/08/2018", "BTC", "USD",5, 26, 12, 9)
source('~/ThinkRProject/CryptoProject/R/averages.R')
source('~/ThinkRProject/CryptoProject/R/weekly_monthly_transformation.R')
source('~/ThinkRProject/CryptoProject/R/day_hour.R')
source('~/ThinkRProject/CryptoProject/R/lastweek_minute.R')
source('~/ThinkRProject/CryptoProject/R/crypto.R')
example4 <- crypto("hour", "01/07/2018", "01/08/2018", "BTC", "USD",5, 26, 12, 9)
check()
library(devtools)
check()
check()
usethis::use_vignette("userguide")
usethis::use_vignette("userguide.RMd")
check()
usethis::use_vignette("userguide")
usethis::use_vignette("userguide")
check()
library(CryptoProject)
example1 <- day_hour("day", "01/12/2017", "01/08/2018", "BTC", "USD")
head(example1)
check()
check()
example2 <- lastweek_minute("BTC", "USD")
head(example2)
check()
build()
